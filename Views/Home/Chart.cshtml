@{
    ViewData["Title"] = "Chart";
}

<div class="text-center">
    <div style="width:100%; height:700px;" id="orgchart" />
    <div id="tree" style="width:auto" />
</div>

@section Scripts {
    <script>
        window.onload = function () {
            OrgChart.templates.ana.field_0 = '<text width="230" style="font-size: 18px;" fill="#ffffff" x="125" y="95" text-anchor="middle" class="field_0">{val}</text>';
            var chart = new OrgChart(document.getElementById("tree"), {
                menu: {
                    pdf: { text: 'Export PDF' },
                    png: { text: "Export PNG" },
                },
                layout: OrgChart.mixed,
                collapse: {
                    level: 2,
                    allChildren: true,
                },
                nodeMouseClick: OrgChart.action.none,
                align: OrgChart.ORIENTATION,
                mouseScrool: OrgChart.action.xScroll,
                showXScroll: OrgChart.scroll.visible,
                nodeBinding: {
                    field_0: "title",

                }
            });

            chart.on('searchclick', function (sender, nodeId) {
                sender.center(nodeId, {
                    parentState: OrgChart.COLLAPSE_PARENT_NEIGHBORS,
                    childrenState: OrgChart.COLLAPSE_SUB_CHILDRENS
                });
                return false;
            });

            chart.on('expcollclick', function (sender, collapse, id, ids) {
                if (!collapse) {
                    sender.center(id, {
                        parentState: OrgChart.COLLAPSE_PARENT_NEIGHBORS,
                        childrenState: OrgChart.COLLAPSE_SUB_CHILDRENS,
                        rippleId: id
                    });
                    return false;
                }
            });

            chart.on('redraw', (sender) => {
                var allNodesRect = document.querySelectorAll('[node-id] rect');
                for (i = 0; i < allNodesRect.length; i++) {
                    var node = document.querySelector('[node-id="' + (i + 1) + '"] rect');
                    node.style.fill = nodes[i].color;
                }
            });

            chart.on('exportstart', (sender, args) => {
                var head = document.head || document.getElementsByTagName('head')[0];
                var style = document.createElement('style');
                style.id = "myStyles";
                for (i = 0; i < nodes.length; i++) {
                    css = '[node-id="' + (i + 1) + '"] rect { fill:' + nodes[i].color + ' }';
                    style.appendChild(document.createTextNode(css));
                }
                head.appendChild(style);
                console.log(document.getElementById('myStyles').outerHTML);
                args.styles += document.getElementById('myStyles').outerHTML;
            });
            fetchJSONFile('https://balkangraph.com/js/demos/remote-json-nodes.json', function (data) {
                //debugger;
                chart.load(data);
            });

            function fetchJSONFile(path, callback) {
                var httpRequest = new XMLHttpRequest();
                httpRequest.onreadystatechange = function () {
                    if (httpRequest.readyState === 4) {
                        if (httpRequest.status === 200) {
                            var data = JSON.parse(httpRequest.responseText);
                            if (callback) callback(data);
                        }
                    }
                };
                httpRequest.open('GET', 'https://localhost:44378/Employees/index');
                httpRequest.send();
            }
        }
    </script>
}
